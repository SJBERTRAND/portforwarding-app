#! /bin/python3

import os
import shutil
import sys
import gi
gi.require_version("Gtk", "4.0")
from gi.repository import Gtk
from gi.repository import GLib
from gi.repository import Gio
from gi.repository import GObject


class portforwarding:

    def __init__(self, app, cancellable):
        self.app = app
        self.cancellable = cancellable

    def create_window(self,app):
        app_settings = Gtk.Settings.get_default()
        #Set the app property
        app_settings.set_property("gtk_application_prefer_dark_theme", True)
        # Create the main window
        win = Gtk.ApplicationWindow(
            application=app,
            title="Port Forwarding APP",
            default_width=320,
            resizable=False
            )

        # Cancel subprocess when window is destroyed
        win.connect('destroy',self.on_destroy)

        # Create the grid
        self.app_grid = self.create_grid()

        # Create the label for the IP
        self.ip_label = self.create_label("Server IP")
        # Create the entry filed for the server ip
        self.server_field = self.create_entry_field("127.0.0.1")

        # Create a label for authtentification type
        self.auth_label = self.create_label("Authtentification type")

        # create two radio button. the key file will disable the password entry field
        self.key_button = self.create_check_button("Key file")
        self.pass_button = self.create_check_button("Password")
        # Addd the two button to a group
        self.key_button.set_group(self.pass_button)

        #Create a username row label and entry entry_field
        self.user_label = self.create_label("Username")
        self.user_field = self.create_entry_field("User")

        #Create a password row label and entry entry_field
        self.pass_label = self.create_label("Password")
        self.pass_field = self.create_password_field("Pass")

        #Create two label local port and remote port with entry field
        self.local_label = self.create_label("Local Port")
        self.local_port = self.create_entry_field("8001")
        self.remote_label = self.create_label("Remote Port")
        self.remote_port = self.create_entry_field("8002")

        # Create a connect create button
        self.connect_button = self.create_button("Connect")
        # Create a disconnect button
        self.disconnect_button = self.create_button("Disconnect")
        # Add the two toggle to the same group
        self.connect_button.set_group(self.disconnect_button)
        # Default the stop active when the window is created
        self.disconnect_button.set_active(True)

        # Create a status label that will display conenction status
        self.status_label = self.create_label("")

        # Import the saved settings
        self.settings = self.get_app_settings()

        # Now bind all settings to the app value
        self.settings.bind('ip',self.server_field, 'text', Gio.SettingsBindFlags.DEFAULT)
        self.settings.bind('username',self.user_field, 'text', Gio.SettingsBindFlags.DEFAULT)
        self.settings.bind('password',self.pass_field, 'text', Gio.SettingsBindFlags.DEFAULT)
        self.settings.bind('localport',self.local_port, 'text', Gio.SettingsBindFlags.DEFAULT)
        self.settings.bind('remoteport',self.remote_port, 'text', Gio.SettingsBindFlags.DEFAULT)
        self.settings.bind('keybutton',self.key_button, 'active', Gio.SettingsBindFlags.DEFAULT)
        self.settings.bind('passbutton',self.pass_button, 'active', Gio.SettingsBindFlags.DEFAULT)

        # Check if the key file is active and if it is set the password field grey
        if (self.key_button.get_active()):
            self.pass_field.set_sensitive(False)

        #Create button signals

        self.connect_button.connect("toggled",self.connect_button_signal)
        self.disconnect_button.connect("toggled",self.disconnect_button_signal)
        self.key_button.connect("toggled",self.key_button_signal)
        self.pass_button.connect("toggled",self.pass_button_signal)

        # attach all wideget to the grid
        self.app_grid.attach(self.ip_label,0,0,1,1)
        self.app_grid.attach(self.server_field,1,0,1,1)
        self.app_grid.attach(self.auth_label,0,1,2,1)

        self.app_grid.attach(self.key_button,0,2,1,1)
        self.app_grid.attach(self.pass_button,1,2,1,1)

        self.app_grid.attach(self.user_label,0,3,1,1)
        self.app_grid.attach(self.user_field,1,3,1,1)
        self.app_grid.attach(self.pass_label,0,4,1,1)
        self.app_grid.attach(self.pass_field,1,4,1,1)

        self.app_grid.attach(self.local_label,0,5,1,1)
        self.app_grid.attach(self.local_port,1,5,1,1)
        self.app_grid.attach(self.remote_label,0,6,1,1)
        self.app_grid.attach(self.remote_port,1,6,1,1)

        self.app_grid.attach(self.status_label,0,7,2,1)
        self.app_grid.attach(self.connect_button,0,8,1,1)
        self.app_grid.attach(self.disconnect_button,1,8,1,1)

        # Attach grid to window
        win.set_child(self.app_grid)

        # Present the window
        win.present()

##### End of create window #####

    def create_grid(self):
        app_grid = Gtk.Grid(
            margin_bottom=25,
            margin_end=25,
            margin_start=25,
            margin_top=25,
            valign=1,
            baseline_row=0,
            column_homogeneous=True,
            column_spacing=10,
            row_homogeneous=True,
            row_spacing=10
            )
        return app_grid

    def create_label(self,label_title):
        new_label = Gtk.Label(
            label=label_title
            )
        return new_label

    def create_button(self,new_label):
        toggle_button = Gtk.ToggleButton(
            label = new_label
            )
        return toggle_button

    def create_entry_field(self,def_text):
        entry_field = Gtk.Entry(
            text = def_text
            )
        return entry_field

    def create_password_field(self,pass_text):
        password_field = Gtk.PasswordEntry(
            text = pass_text,
            show_peek_icon = True
            )
        return password_field

    def create_check_button(self,new_label):
        check_button = Gtk.CheckButton(
            label = new_label
            )
        return check_button

    def get_app_settings(self):
        _username = os.getlogin()

        dir_path = '/home/'+_username+'/.config/portforwarding_app/data/'
        file_path = dir_path+'gschemas.compiled'
        install_path = '/usr/share/portforwarding_app/data/gschemas.compiled'

        if os.path.isdir(dir_path):
            print("Directory exist")
        else:
            os.makedirs(dir_path)

        if os.path.exists(file_path):
            print("File Exit")
        else:
            shutil.copyfile(install_path,file_path)

        # Once the file is found or copied set the os environ
        os.environ['GSETTINGS_SCHEMA_DIR'] = dir_path
        app_settings = Gio.Settings(schema_id="org.portforwarding_app.local")
        return app_settings

    def connect_button_signal(self,connect_button):
        if(connect_button.get_active()):
            self.status_label.set_label("Connecting")
            #Build the command
            command = self.build_command(self.settings)

            #Build the subprocess
            self.subprocess = Gio.Subprocess.new(command, Gio.SubprocessFlags.NONE)
            self.status_label.set_label("Connected")

            # Initialized the ssh connection and call function when completed
            self.subprocess.wait_async(self.cancellable,self.subprocess_compeleted);


    def disconnect_button_signal(self,disconnect_button):
        if(disconnect_button.get_active()):
            print('disconnecting')
            self.subprocess.force_exit()

    def key_button_signal(self,key_button):
        if(key_button.get_active()):
            self.pass_field.set_sensitive(False)
            print("Keyfile mode selected")

    def pass_button_signal(self,pass_button):
        if(pass_button.get_active()):
            self.pass_field.set_sensitive(True)
            print("Password mode selected")

    def build_command(self,settings):
        # Check if password mode is selected then build the inital command accordingly
        if (self.settings.get_boolean('passbutton')):
            command = ['sshpass', '-p', self.settings.get_string('password'), 'ssh','-p', '22', '-N', '-o', 'ConnectTimeout=10', '-o', 'StrictHostKeyChecking=accept-new', '-o', 'UpdateHostKeys=yes' ]
        else:
            command = ['ssh','-p', '22','-N','-o','PasswordAuthentication=no','-o', 'BatchMode=true', '-o', 'ConnectTimeout=10', '-o', 'StrictHostKeyChecking=accept-new', '-o', 'UpdateHostKeys=yes']

        command.extend(['-L', self.settings.get_string('remoteport')+':'+self.settings.get_string('ip')+':'+self.settings.get_string('localport'), self.settings.get_string('username')+'@'+self.settings.get_string('ip') ])

        return command

    def subprocess_compeleted(self,subprocess,result):
        self.status_label.set_label("Disconnected")
        self.disconnect_button.set_active(True)

    def on_destroy(self,win):
        if (self.connect_button.get_active()):
            self.subprocess.force_exit()


# Main function

def main ():

    app = Gtk.Application(application_id="org.portforwarding_app.local")

    cancellable = Gio.Cancellable.new()

    application_window =  portforwarding(app,cancellable)

    app.connect("activate",application_window.create_window)

    app.run()


if __name__ == "__main__":
    main()
